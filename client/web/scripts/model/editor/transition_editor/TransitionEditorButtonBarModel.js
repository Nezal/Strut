// Generated by CoffeeScript 1.3.3

define(["vendor/backbone"], function(Backbone) {
  var silent, toDeg;
  toDeg = Math.PI / 180;
  silent = {
    silent: true
  };
  return Backbone.Model.extend({
    initialize: function() {
      var deck;
      deck = this.get("deck");
      deck.on("change:activeSlide", this._activeSlideChanged, this);
      this._lastActive = null;
      return this._activeSlideChanged(deck, deck.get("activeSlide"));
    },
    _activeSlideChanged: function(deck, slide) {
      if (this._lastActive != null) {
        this._lastActive.off(null, null, this);
      }
      this._lastActive = slide;
      if (slide != null) {
        slide.on("change:x", this._slidePositionChanged, this);
        slide.on("change:y", this._slidePositionChanged, this);
        slide.on("change:z", this._slidePositionChanged, this);
        slide.on("change:rotateX", this._slideRotationChanged, this);
        slide.on("change:rotateY", this._slideRotationChanged, this);
        slide.on("change:rotateZ", this._slideRotationChanged, this);
        this._slidePositionChanged(slide);
        return this._slideRotationChanged(slide);
      }
    },
    _slidePositionChanged: function(slide, value) {
      return this.trigger("change:slidePosition", this, this.slidePosition());
    },
    _slideRotationChanged: function(slide, value) {
      return this.trigger("change:slideRotations", this, this.slideRotations());
    },
    slidePosition: function() {
      var slide;
      slide = this._lastActive;
      if (slide != null) {
        return [slide.get("x"), slide.get("y"), slide.get("z")];
      } else {
        return [0, 0, 0];
      }
    },
    slideRotations: function() {
      var slide;
      slide = this._lastActive;
      if (slide != null) {
        return [slide.get("rotateX") * toDeg, slide.get("rotateY") * toDeg, slide.get("rotateZ") * toDeg];
      } else {
        return [0, 0, 0];
      }
    },
    changeSlidePosition: function(x, y, z) {
      var slide, toSet;
      slide = this._lastActive;
      if (slide != null) {
        toSet = {};
        if (x != null) {
          toSet.x = x;
        }
        if (y != null) {
          toSet.y = y;
        }
        if (z != null) {
          toSet.z = z;
        }
        slide.set(toSet, silent);
        return slide.trigger("render");
      }
    },
    changeSlideRotations: function(x, y, z) {
      var slide, toSet;
      slide = this._lastActive;
      if (slide != null) {
        toSet = {};
        if (x != null) {
          toSet.rotateX = x * toDeg;
        }
        if (y != null) {
          toSet.rotateY = y * toDeg;
        }
        if (z != null) {
          toSet.rotateZ = z * toDeg;
        }
        slide.set(toSet, silent);
        return slide.trigger("rerender");
      }
    },
    constructor: function TransitionEditorButtonBarModel() {
			Backbone.Model.prototype.constructor.apply(this, arguments);
		}
  });
});
